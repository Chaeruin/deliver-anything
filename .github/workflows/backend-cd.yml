name: Backend CD

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/**"
      - "backend/**"
      - "infra/docker/**"

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  deploy:
    if: github.repository == 'yeongbin1999/deliver-anything'
    runs-on: ubuntu-latest

    env:
      # --- ÌîÑÎ°úÏ†ùÌä∏Î≥Ñ ÏÑ§Ï†ï ---
      APP_NAME: deliver-anything-backend
      IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/deliver-anything-backend

      # --- Blue/Green Î∞∞Ìè¨ ÏÑ§Ï†ï ---
      BLUE_CONTAINER: backend-blue
      GREEN_CONTAINER: backend-green
      PORT_BLUE: 8081
      PORT_GREEN: 8082
      SPRING_PROFILE: prod

      # --- EC2 Í≤ÄÏÉâÏö© ---
      EC2_NAME: team9-ec2

      # --- Nginx Proxy Manager ---
      NPM_ID: ${{ secrets.NPM_ID }}
      NPM_PASSWORD: ${{ secrets.NPM_PASSWORD }}
      NPM_DOMAIN: ${{ secrets.NPM_DOMAIN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1) Î≤ÑÏ†Ñ ÌÉúÍπÖ + Î¶¥Î¶¨Ïä§
      - name: Create Git Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Tag Output
        id: set_tag_output
        run: echo "new_tag=${{ steps.create_tag.outputs.new_tag }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

      # 2) Docker ÎπåÎìúÏö© .env ÏÉùÏÑ±
      - name: Create .env file
        run: |
          mkdir -p ./backend
          printf "%s" "${{ secrets.DOT_ENV }}" > ./backend/.env

      # 3) Docker ÎπåÎìú/Ìë∏Ïãú (GHCR)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: infra/docker/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ steps.create_tag.outputs.new_tag }}
            ${{ env.IMAGE_REPO }}:sha-${{ github.sha }}
            ${{ env.IMAGE_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 4) AWS ÏûêÍ≤© Íµ¨ÏÑ± (OIDC)
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::174170816230:role/gha-deploy
          aws-region: ap-northeast-2
          role-session-name: github-actions-deploy

      # 5) ÎåÄÏÉÅ EC2 ÏãùÎ≥Ñ (ÌÉúÍ∑∏ Í∏∞Î∞ò)
      - name: Get EC2 Instance ID
        id: get_instance
        run: |
          set -euo pipefail
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${EC2_NAME}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = "None" ]; then
            echo "‚ùå No running EC2 instance found"
            exit 1
          fi
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "üîé Using EC2 instance: $INSTANCE_ID"

      # 6) Blue/Green Î∞∞Ìè¨ (SSM) - ÏßÅÏ†ë CLI ÏÇ¨Ïö©
      - name: Blue/Green deploy via SSM
        run: |
          set -euo pipefail
          
          # Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏ ÌååÏùº ÏÉùÏÑ±
          cat <<'EOF' > deploy.sh
          set -euo pipefail

          IMAGE="${IMAGE_REPO}:${NEW_TAG}"
          echo "üö¢ Deploying image: $IMAGE"

          # Blue/Green ÏÉÅÌÉú ÌååÏïÖ
          if docker ps --format '{{.Names}}' | grep -q "^${BLUE_CONTAINER}$"; then
            ACTIVE=blue; INACTIVE=green; PORT_ACTIVE=$PORT_BLUE; PORT_INACTIVE=$PORT_GREEN
          elif docker ps --format '{{.Names}}' | grep -q "^${GREEN_CONTAINER}$"; then
            ACTIVE=green; INACTIVE=blue; PORT_ACTIVE=$PORT_GREEN; PORT_INACTIVE=$PORT_BLUE
          else
            ACTIVE=none; INACTIVE=blue; PORT_ACTIVE=; PORT_INACTIVE=$PORT_BLUE
          fi

          NEW_CONTAINER="backend-$INACTIVE"
          echo "üîÅ ACTIVE=$ACTIVE, NEW=$NEW_CONTAINER -> $PORT_INACTIVE"

          # ÎÑ§Ìä∏ÏõåÌÅ¨ Î≥¥Ïû•
          docker network inspect common >/dev/null 2>&1 || docker network create common

          # Í∏∞Ï°¥ INACTIVE Ïª®ÌÖåÏù¥ÎÑà Ï†úÍ±∞
          docker rm -f "$NEW_CONTAINER" >/dev/null 2>&1 || true

          # ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
          docker run -d --name "$NEW_CONTAINER" \
            --network common \
            -p $PORT_INACTIVE:8080 \
            -e SPRING_PROFILES_ACTIVE=$SPRING_PROFILE \
            "$IMAGE"

          # Healthcheck
          echo "‚è± Waiting for $NEW_CONTAINER to be healthy..."
          HEALTH_OK=false
          TIMEOUT=120
          INTERVAL=3
          ELAPSED=0
          until [ $ELAPSED -ge $TIMEOUT ]; do
            STATUS=$(docker exec "$NEW_CONTAINER" sh -c "curl -fsS -o /dev/null -w '%{http_code}' http://127.0.0.1:8080/actuator/health" || echo 000)
            if [ "$STATUS" = "200" ]; then
              HEALTH_OK=true; echo "‚úÖ Healthy!"; break
            fi
            sleep $INTERVAL; ELAPSED=$((ELAPSED + INTERVAL))
          done
          if [ "$HEALTH_OK" = false ]; then
            echo "‚ùå Health check failed"; docker logs "$NEW_CONTAINER" || true
            docker rm -f "$NEW_CONTAINER" || true; exit 1
          fi

          # Í∏∞Ï°¥ ACTIVE Ï†úÍ±∞
          if [ "$ACTIVE" != "none" ]; then
            docker rm -f "backend-$ACTIVE" || true
          fi

          echo "üéâ Blue/Green switch complete ‚Üí $NEW_CONTAINER"
          EOF

          # SSM Ïã§Ìñâ
          aws ssm send-command \
            --targets "Key=instanceIds,Values=${INSTANCE_ID}" \
            --document-name "AWS-RunShellScript" \
            --comment "Blue/Green deploy" \
            --parameters "commands=[\"export IMAGE_REPO='${IMAGE_REPO}'; export NEW_TAG='${{ steps.create_tag.outputs.new_tag }}'; export BLUE_CONTAINER='${BLUE_CONTAINER}'; export GREEN_CONTAINER='${GREEN_CONTAINER}'; export PORT_BLUE=${PORT_BLUE}; export PORT_GREEN=${PORT_GREEN}; export SPRING_PROFILE='${SPRING_PROFILE}'; $(cat deploy.sh | sed 's/"/\\"/g')\"]" \
            --region ap-northeast-2