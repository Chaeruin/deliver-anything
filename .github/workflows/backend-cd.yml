name: Backend CD

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/**"
      - "backend/**"
      - "infra/docker/**"

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_NAME: deliver-anything-backend
      IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/deliver-anything-backend
      BLUE_CONTAINER: backend-blue
      GREEN_CONTAINER: backend-green
      PORT_BLUE: 8081
      PORT_GREEN: 8082
      SPRING_PROFILE: prod
      EC2_NAME: team9-ec2
      NPM_ID: ${{ secrets.NPM_ID }}
      NPM_PASSWORD: ${{ secrets.NPM_PASSWORD }}
      NPM_DOMAIN: ${{ secrets.NPM_DOMAIN }}
      DOT_ENV: ${{ secrets.DOT_ENV }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Git Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Tag Output
        id: set_tag_output
        run: echo "new_tag=${{ steps.create_tag.outputs.new_tag }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Generate .env
        run: mkdir -p backend && echo "$DOT_ENV" > backend/.env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: infra/docker/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ steps.create_tag.outputs.new_tag }}
            ${{ env.IMAGE_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get EC2 Instance ID
        id: get_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${EC2_NAME}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "❌ No running EC2 instance found"
            exit 1
          fi
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Deploy via SSM
        uses: peterkimzz/aws-ssm-send-command@master
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ env.INSTANCE_ID }}
          working-directory: /
          comment: Deploy
          command: |
            IMAGE=${{ env.IMAGE_REPO }}:${{ steps.create_tag.outputs.new_tag }}

            # --- 현재 활성 컨테이너 확인 ---
            if docker ps --filter "name=${BLUE_CONTAINER}" | grep ${BLUE_CONTAINER}; then
                ACTIVE=blue
                INACTIVE=green
                PORT_ACTIVE=${PORT_BLUE}
                PORT_INACTIVE=${PORT_GREEN}
            elif docker ps --filter "name=${GREEN_CONTAINER}" | grep ${GREEN_CONTAINER}; then
                ACTIVE=green
                INACTIVE=blue
                PORT_ACTIVE=${PORT_GREEN}
                PORT_INACTIVE=${PORT_BLUE}
            else
                ACTIVE=none
                INACTIVE=blue
                PORT_ACTIVE=
                PORT_INACTIVE=${PORT_BLUE}
            fi

            NEW_CONTAINER=backend-$INACTIVE

            # --- 기존 INACTIVE 컨테이너 제거 ---
            docker stop $NEW_CONTAINER || true
            docker rm $NEW_CONTAINER || true

            # --- 새 컨테이너 실행 (env-file 제거) ---
            docker run -d --name $NEW_CONTAINER \
              --network common \
              -p $PORT_INACTIVE:8080 \
              -e SPRING_PROFILES_ACTIVE=${SPRING_PROFILE} \
              $IMAGE

            sleep 20

            # --- 헬스체크 ---
            HEALTH_OK=false
            TIMEOUT=120
            INTERVAL=3
            ELAPSED=0
            until [ $ELAPSED -ge $TIMEOUT ]; do
              STATUS=$(docker exec $NEW_CONTAINER curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8080/actuator/health || echo 000)
              if [ "$STATUS" -eq 200 ]; then
                HEALTH_OK=true
                echo "✅ $NEW_CONTAINER is healthy!"
                break
              fi
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
            done

            if [ "$HEALTH_OK" = false ]; then
              echo "❌ $NEW_CONTAINER did not pass health check."
              docker stop $NEW_CONTAINER || true
              docker rm $NEW_CONTAINER || true
              exit 1
            fi

            # --- NPM 토큰 발급 ---
            TOKEN=$(curl -s -X POST http://127.0.0.1:81/api/tokens \
              -H "Content-Type: application/json" \
              -d "{\"identity\": \"${NPM_ID}\", \"secret\": \"${NPM_PASSWORD}\"}" | jq -r '.token')

            # --- 프록시 ID 확인 ---
            PROXY_ID=$(curl -s -X GET "http://127.0.0.1:81/api/nginx/proxy-hosts" \
              -H "Authorization: Bearer $TOKEN" \
              | jq ".[] | select(.domain_names[]==\"${NPM_DOMAIN}\") | .id")

            # --- 업스트림 전환 ---
            NEW_CONFIG=$(jq -n --arg host "$NEW_CONTAINER" --argjson port 8080 '{forward_host: $host, forward_port: $port}')
            curl -s -X PUT "http://127.0.0.1:81/api/nginx/proxy-hosts/$PROXY_ID" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d "$NEW_CONFIG"

            # --- 이전 ACTIVE 제거 ---
            if [ "$ACTIVE" != "none" ]; then
              docker stop backend-$ACTIVE || true
              docker rm backend-$ACTIVE || true
            fi

            echo "✅ Blue-Green switch complete: $NEW_CONTAINER is now active."